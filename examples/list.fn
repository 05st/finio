infixl 6 ++

data List a = Nil | Cons a (List a)

fn map
    f List::Nil = List::Nil
    f (List::Cons x l') = List::Cons (f x) (map f l')

fn foldl
    f a List::Nil = a
    f a (List::Cons x l') = foldl f (f a x) l'

let (++) = append
fn append
    (List::Nil) b = b
    (List::Cons x a') b = List::Cons x (append a' b)

fn concat
    List::Nil = List::Nil
    List::Cons x l = x ++ (concat l)

fn concatMap f l = concat (map f l)

fn intersperse
    a List::Nil = List::Nil
    a List::Cons x l = List::Cons x (List::Cons a (intersperse a l))

fn intercalate a l = concat (intersperse a l)
