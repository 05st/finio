import abc

# trait Show a
#     show : a -> str

# impl Show unit
#     let show = \x -> "()"

# fn main : unit -> unit
#     () = println "fino"

# Code blocks (i.e. expressions with indentations) are used to sequence computations
# which is useful for I/O. Each expression has its result thrown away except for the
# very last expression which is what the code block evaluates to.
# fn example : unit -> unit
#     () =
#         println "User input example"
#         let name = input () in
#         println ("Hello " + name)
        
# Starting a code block with the 'do' keyword sequences monadic computations, exactly
# like 'do' blocks in Haskell.
# fn test : a -> Maybe a
#     x = do
#         abc <- xyz

# Alternatively, no indent required without type signature.
# 
# fn main () = print "fino"
#
# Indent with code block
#
# fn main () =
#     print "fino"
#
# Indent without code block
#
# fn main
#     () = print "fino"

fn a
    x = y